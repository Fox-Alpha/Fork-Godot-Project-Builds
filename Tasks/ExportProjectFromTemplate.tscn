[gd_scene load_steps=2 format=3 uid="uid://doi6iht30rdxc"]

[sub_resource type="GDScript" id="GDScript_mlhhy"]
script/source = "extends \"res://Tasks/ExportTask.gd\"

const CUSTOM_PRESET = \"_Project_Builds_\"

@onready var preset_list: OptionButton = %PresetList
@onready var template_list: OptionButton = %TemplateList
@onready var path_suffix: LineEdit = %PathSuffix
@onready var debug: CheckBox = %Debug

var custom_preset: int

func _get_task_name() -> String:
	return \"Export Project From Template\"

func _get_execute_string() -> String:
	return \"Export Project From Template (preset %s, template %s)\" % [data[\"preset\"], data[\"template\"]]

func _initialize():
	super()
	defaults[\"preset\"] = \"\"
	defaults[\"template\"] = \"\"
	defaults[\"path_suffix\"] = \"\"
	defaults[\"debug\"] = false
	
	var export_presets := load_presets()
	if not export_presets:
		return
	
	for section in export_presets.get_sections():
		if section.ends_with(\"options\"):
			continue
		
		preset_list.add_item(export_presets.get_value(section, \"name\"))
	
	for template in Data.templates:
		template_list.add_item(template[\"name\"])

func _prevalidate() -> bool:
	if not super():
		return false
	
	var template_name: String = template_list.get_item_text(template_list.selected)
	if Data.get_template(template_name).is_empty():
		error_message = \"Invalid export preset template: %s.\" % template_name
	
	return error_message.is_empty()

func _prepare() -> void:
	var export_presets := load_presets()
	var template := Data.get_template(template_list.get_item_text(template_list.selected))
	
	var base_preset := preset_list.selected
	custom_preset = preset_list.item_count
	for section in export_presets.get_sections():
		if export_presets.get_value(section, \"name\", \"\") == CUSTOM_PRESET:
			custom_preset = section.get_slice(\".\", 1).to_int()
			break
	
	var new_section := \"preset.%d\" % custom_preset
	var section := \"preset.%d\" % base_preset
	for key in export_presets.get_section_keys(section):
		export_presets.set_value(new_section, key, export_presets.get_value(section, key))
	
	export_presets.set_value(new_section, \"name\", CUSTOM_PRESET)
	export_presets.set_value(new_section, \"custom_features\", \", \".join(template[\"custom_features\"]))
	export_presets.set_value(new_section, \"include_filter\", \", \".join(template[\"include_filters\"]))
	export_presets.set_value(new_section, \"exclude_filter\", \", \".join(template[\"exclude_filters\"]))
	
	if not template[\"export_path\"].is_empty():
		set_export_path(template[\"export_path\"].path_join(path_suffix.text))
		export_presets.set_value(new_section, \"export_path\", export_path)
	else:
		set_export_path(export_presets.get_value(new_section, \"export_path\", \"\"))
	
	new_section = \"preset.%d.options\" % custom_preset
	section = \"preset.%d.options\" % base_preset
	for key in export_presets.get_section_keys(section):
		export_presets.set_value(new_section, key, export_presets.get_value(section, key))
	
	export_presets.save(preset_path)
	
	export_debug = debug.button_pressed
	export_preset = CUSTOM_PRESET
	
	super()

func _cleanup() -> void:
	var export_presets := load_presets()
	if not export_presets:
		return
	
	export_presets.erase_section(\"preset.%d\" % custom_preset)
	export_presets.erase_section(\"preset.%d.options\" % custom_preset)
	
	export_presets.save(preset_path)

func _load():
	var text: String = data[\"preset\"]
	preset_list.selected = 0
	
	for i in preset_list.item_count:
		if preset_list.get_item_text(i) == text:
			preset_list.selected = i
			break
	
	text = data[\"template\"]
	template_list.selected = 0
	
	for i in template_list.item_count:
		if template_list.get_item_text(i) == text:
			template_list.selected = i
			break
	
	path_suffix.text = data[\"path_suffix\"]
	debug.button_pressed = data[\"debug\"]

func _store():
	data[\"preset\"] = preset_list.get_item_text(preset_list.selected)
	data[\"template\"] = template_list.get_item_text(template_list.selected)
	data[\"path_suffix\"] = path_suffix.text
	data[\"debug\"] = debug.button_pressed

func _get_task_info() -> PackedStringArray:
	return [
		\"Exports the project by creating a new preset using the selected template. An existing preset is used as a base.\",
		\"Base Preset|Preset name from the project's presets defined in the Export dialog.\",
		\"Preset Template|Template name from the templates defined in Project Builder.\",
		\"Debug|If enabled, exports a debug build.\",
	]
"

[node name="ExportProjectFromTemplate" type="GridContainer"]
offset_right = 532.0
offset_bottom = 120.0
columns = 2
script = SubResource("GDScript_mlhhy")

[node name="Label" type="Label" parent="."]
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
text = "Base Preset"
horizontal_alignment = 2

[node name="PresetList" type="OptionButton" parent="."]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Label2" type="Label" parent="."]
layout_mode = 2
text = "Preset Template"
horizontal_alignment = 2

[node name="TemplateList" type="OptionButton" parent="."]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Label3" type="Label" parent="."]
layout_mode = 2
text = "Path Suffix"
horizontal_alignment = 2

[node name="PathSuffix" type="LineEdit" parent="."]
unique_name_in_owner = true
layout_mode = 2

[node name="Control" type="Control" parent="."]
layout_mode = 2

[node name="Debug" type="CheckBox" parent="."]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
text = "Debug"
