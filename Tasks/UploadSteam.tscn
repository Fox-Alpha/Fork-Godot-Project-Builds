[gd_scene load_steps=2 format=3 uid="uid://b7iec2eyiepn8"]

[sub_resource type="GDScript" id="GDScript_ftiq7"]
script/source = "extends Task

@onready var vdf_file: OptionButton = %VDFFile

static var vdf_list: PackedStringArray

func _get_task_name() -> String:
	return \"Upload Steam\"

func _get_execute_string() -> String:
	return \"Steam Build (%s)\" % vdf_file.text

static func _initialize_project():
	var cache_file := get_cache_file(\"SteamVDF\", FileAccess.READ)
	if cache_file:
		vdf_list = str_to_var(cache_file.get_as_text())
	else:
		vdf_list.clear()

static func _begin_project_scan() -> void:
	vdf_list.clear()

static func _process_file(file: String):
	if file.get_extension() != \"vdf\":
		return
	
	var f := FileAccess.open(file, FileAccess.READ)
	for line in f.get_as_text().split(\"\\n\"):
		if line.contains(\"AppBuild\"):
			vdf_list.append(file.trim_prefix(Data.project_path + \"/\"))
			break

static func _end_project_scan() -> void:
	var cache_file := get_cache_file(\"SteamVDF\", FileAccess.WRITE)
	cache_file.store_string(var_to_str(vdf_list))

func _initialize() -> void:
	defaults[\"vdf_path\"] = \"\"
	
	if vdf_list.is_empty():
		vdf_file.add_item(\"List empty. Run project scan from Config tab.\")
		vdf_file.set_item_metadata(-1, \"\")
		vdf_file.disabled = true
	else:
		for file in vdf_list:
			vdf_file.add_item(file.get_file())
			vdf_file.set_item_metadata(-1, file)
			vdf_file.set_item_tooltip(-1, file)

func _prevalidate() -> bool:
	if Data.global_config[\"steam_cmd_path\"].is_empty():
		error_message = \"Steam CMD path is empty.\"
	elif not FileAccess.file_exists(Data.global_config[\"steam_cmd_path\"]):
		error_message = \"Steam CMD path does not point to any file.\"
	elif Data.global_config[\"steam_username\"].is_empty():
		error_message = \"Steam username is empty.\"
	elif Data.global_config[\"steam_password\"].is_empty():
		error_message = \"Steam password is empty.\"
	
	return error_message.is_empty()

func _validate() -> bool:
	if not FileAccess.file_exists(Data.project_path.path_join(get_vdf_path())):
		error_message = \"The provided VDF file does not exist.\"
		return false
	return true

func _get_command() -> String:
	return Data.global_config[\"steam_cmd_path\"]

func _get_arguments() -> PackedStringArray:
	var ret: PackedStringArray
	
	ret.append(\"+login\")
	ret.append(Data.global_config[\"steam_username\"])
	ret.append(Data.global_config[\"steam_password\"])
	
	ret.append(\"+run_app_build\")
	ret.append(Data.project_path.path_join(get_vdf_path()))
	
	ret.append(\"+quit\")
	
	return ret

func _load():
	var file: String = data[\"vdf_path\"]
	
	for i in vdf_file.item_count:
		if vdf_file.get_item_metadata(i) == file:
			vdf_file.selected = i
			break

func _store():
	data[\"vdf_path\"] = get_vdf_path()

func _get_task_info() -> PackedStringArray:
	return [
		\"Uploads files to Steam based on the given VDF file, using steamcmd.exe.\",
		\"VDF File|File used as a base to upload. Only AppBuild VDF files are supported.\",
	]

func get_vdf_path() -> String:
	return vdf_file.get_selected_metadata()
"

[node name="UploadSteam" type="GridContainer"]
offset_right = 522.0
offset_bottom = 23.0
columns = 2
script = SubResource("GDScript_ftiq7")
has_static_configuration = true
has_sensitive_data = true

[node name="Label" type="Label" parent="."]
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
text = "VDF File"
horizontal_alignment = 2

[node name="VDFFile" type="OptionButton" parent="."]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
