[gd_scene load_steps=2 format=3 uid="uid://dh4e5n3xxf3n"]

[sub_resource type="GDScript" id="GDScript_boi7e"]
script/source = "extends Task

@onready var limbo: Node2D = %Limbo
@onready var sub_routine_list: OptionButton = %SubRoutine

var task_instances: Array[Task]
var task_index: int
var current_task: Task

func _get_task_name() -> String:
	return \"Sub-Routine\"

func _get_execute_string() -> String:
	return \"Sub-Routine: %s\" % current_task._get_task_name()

func _initialize():
	if not is_node_ready():
		await ready
	
	var current_routine
	if owner:
		current_routine = owner.get(&\"routine\")
	if not current_routine:
		current_routine = {}
	
	for i in Data.routines.size():
		var rout := Data.routines[i]
		if rout == current_routine:
			continue
		
		sub_routine_list.add_item(rout[\"name\"])
		sub_routine_list.set_item_metadata(-1, rout[\"name\"])

func _prevalidate() -> bool:
	if not task_instances.is_empty():
		return true
	
	var routine_name: String = data[\"routine\"]
	
	var task_list: Array[Dictionary]
	for rout in Data.routines:
		if rout[\"name\"] == routine_name:
			task_list = rout[\"tasks\"]
			break
	
	if task_list.is_empty():
		error_message = \"Invalid routine name or no tasks.\"
		return false
	
	for task in task_list:
		var task_instance := Task.create_instance(task[\"scene\"])
		limbo.add_child(task_instance)
		task_instance._initialize()
		task_instance.load_data(task[\"data\"])
		task_instances.append(task_instance)
		
		var result := task_instance._prevalidate()
		if not result:
			current_task = task_instance
			error_message = task_instance.error_message
			return false
	
	current_task = task_instances.front()
	return true

func _validate() -> bool:
	current_task = task_instances[task_index]
	
	var result := current_task._validate()
	error_message = current_task.error_message
	return result

func _get_command() -> String:
	return current_task._get_command()

func _get_arguments() -> PackedStringArray:
	return current_task._get_arguments()

func _prepare() -> void:
	current_task._prepare()

func _cleanup() -> void:
	current_task._cleanup()
	task_index += 1
	
	if task_index < task_instances.size():
		var next: Task = load(scene_file_path).instantiate()
		next.task_instances = task_instances
		next.task_index = task_index
		
		get_parent().add_child(next)
		get_parent().move_child(next, get_index() + 1)

func _load() -> void:
	var routine_name: String = data[\"routine\"]
	
	for i in sub_routine_list.item_count:
		if sub_routine_list.get_item_metadata(i) == routine_name:
			sub_routine_list.selected = i
			break

func _store() -> void:
	data[\"routine\"] = sub_routine_list.get_selected_metadata()

func _get_task_info() -> PackedStringArray:
	return [
		\"Inlines another routine to allow running other routines as part of routines.\",
		\"Routine|Name of the routine to run. Automatically lists all configured routines.\"
	]
"

[node name="SubRoutine" type="GridContainer"]
offset_right = 377.0
offset_bottom = 23.0
columns = 2
script = SubResource("GDScript_boi7e")

[node name="Label" type="Label" parent="."]
auto_translate_mode = 1
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
text = "Routine"
horizontal_alignment = 2

[node name="SubRoutine" type="OptionButton" parent="."]
unique_name_in_owner = true
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3

[node name="Limbo" type="Node2D" parent="."]
unique_name_in_owner = true
visible = false
position = Vector2(0, 27)
