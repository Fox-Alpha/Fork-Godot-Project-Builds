[gd_scene load_steps=2 format=3 uid="uid://7qw6mxp834ei"]

[sub_resource type="GDScript" id="GDScript_a0t4t"]
script/source = "extends Task

@onready var json_file: OptionButton = %JSONFile
@onready var branch: LineEdit = %Branch
@onready var branch_password: LineEdit = %BranchPassword

static var json_list: PackedStringArray

func _get_task_name() -> String:
	return \"Upload GOG\"

func _get_execute_string() -> String:
	return \"GOG Build (%s)\" % json_file.text

static func _initialize_project():
	var cache_file := get_cache_file(\"GOGJSON\", FileAccess.READ)
	if cache_file:
		json_list = str_to_var(cache_file.get_as_text())
	else:
		json_list.clear()

static func _begin_project_scan() -> void:
	json_list.clear()

static func _process_file(file: String):
	if file.get_extension() != \"json\":
		return
	
	var json: JSON = load(file)
	if not json.data is Dictionary:
		return
	
	var json_data: Dictionary = json.data
	if not \"project\" in json_data or not \"baseProductId\" in json_data[\"project\"]:
		return
	
	json_list.append(file.trim_prefix(Data.project_path + \"/\"))

static func _end_project_scan() -> void:
	var cache_file := get_cache_file(\"GOGJSON\", FileAccess.WRITE)
	cache_file.store_string(var_to_str(json_list))

func _initialize() -> void:
	defaults[\"json_path\"] = \"\"
	defaults[\"branch\"] = \"\"
	defaults[\"branch_password\"] = \"\"
	
	if json_list.is_empty():
		json_file.add_item(\"List empty. Run project scan from Config tab.\")
		json_file.set_item_metadata(-1, \"\")
		json_file.disabled = true
	else:
		for file in json_list:
			json_file.add_item(file.get_file())
			json_file.set_item_metadata(-1, file)
			json_file.set_item_tooltip(-1, file)

func _prevalidate() -> bool:
	if Data.global_config[\"pipeline_builder_path\"].is_empty():
		error_message = \"Pipeline Builder path is empty.\"
	elif not FileAccess.file_exists(Data.global_config[\"pipeline_builder_path\"]):
		error_message = \"Pipeline Builder path does not point to any file.\"
	elif Data.global_config[\"gog_username\"].is_empty():
		error_message = \"GOG username is empty.\"
	elif Data.global_config[\"gog_password\"].is_empty():
		error_message = \"GOG password is empty.\"
	elif Data.get_project_version().is_empty():
		error_message = \"Project version (application/config/version) is empty.\"
	
	return error_message.is_empty()

func _validate() -> bool:
	if not FileAccess.file_exists(Data.project_path.path_join(get_json_path())):
		error_message = \"The provided JSON file does not exist.\"
		return false
	return true

func _get_command() -> String:
	return Data.global_config[\"pipeline_builder_path\"]

func _get_arguments() -> PackedStringArray:
	var ret: PackedStringArray
	
	ret.append(\"build-game\")
	ret.append(Data.project_path.path_join(get_json_path()))
	
	ret.append(\"--version\")
	ret.append(Data.get_project_version())
	
	ret.append(\"--username\")
	ret.append(Data.global_config[\"gog_username\"])
	
	ret.append(\"--password\")
	ret.append(Data.global_config[\"gog_password\"])
	
	if not branch.text.is_empty():
		ret.append(\"--branch\")
		ret.append(branch.text)
		
		if not branch_password.text.is_empty():
			ret.append(\"--branch_password\")
			ret.append(branch_password.text)
	
	#ret.append(\"--offline\")
	
	return ret

func _load():
	branch.text = data[\"branch\"]
	branch.text = data[\"branch_password\"]
	
	var file: String = data[\"json_path\"]
	for i in json_file.item_count:
		if json_file.get_item_metadata(i) == file:
			json_file.selected = i
			break

func _store():
	data[\"json_path\"] = get_json_path()
	data[\"branch\"] = branch.text
	data[\"branch_password\"] = branch_password.text

func _get_task_info() -> PackedStringArray:
	return [
		\"Uploads files to GOG based on the given JSON file, using Pipeline Builder.\",
		\"JSON File|File used as a base to upload.\",
		\"Branch|Branch name to upload to.\",
		\"Branch Password|Password for the branch if it's protected.\",
	]

func get_json_path() -> String:
	return json_file.get_selected_metadata()
"

[node name="UploadGog" type="GridContainer"]
offset_right = 520.0
offset_bottom = 23.0
columns = 2
script = SubResource("GDScript_a0t4t")
has_static_configuration = true
has_sensitive_data = true

[node name="Label" type="Label" parent="."]
auto_translate_mode = 1
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
text = "JSON File"
horizontal_alignment = 2

[node name="JSONFile" type="OptionButton" parent="."]
unique_name_in_owner = true
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3

[node name="Label2" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 8
text = "Branch"
horizontal_alignment = 2

[node name="Branch" type="LineEdit" parent="."]
unique_name_in_owner = true
layout_mode = 2

[node name="Label3" type="Label" parent="."]
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 8
text = "Branch Password"
horizontal_alignment = 2

[node name="BranchPassword" type="LineEdit" parent="."]
unique_name_in_owner = true
auto_translate_mode = 1
layout_mode = 2
