[gd_scene load_steps=2 format=3 uid="uid://7qw6mxp834ei"]

[sub_resource type="GDScript" id="GDScript_a0t4t"]
script/source = "extends Task
## TODO: jakieś ustawienia wersji? (albo info skąd jest), checkbox override version
## TODO: branch
## TODO: default branch?

const TEMP_JSON_PATH = \"user://BuildGOG.json\"

@onready var json_file: OptionButton = %JSONFile

static var json_list: PackedStringArray ## TODO: czyścić to po zmianie projektu/ albo wgl czytać jak się otworzy projekt

func _get_task_name() -> String:
	return \"Upload GOG\"

func _get_execute_string() -> String:
	return \"GOG Build (%s)\" % json_file.text

func _get_command() -> String:
	return Data.global_config.get(\"pipeline_builder_path\", \"\")

func _get_arguments() -> PackedStringArray:
	var ret: PackedStringArray
	
	ret.append(\"build-game\")
	ret.append(Data.project_path.path_join(json_file.get_selected_metadata()))
	
	ret.append(\"--version\")
	ret.append(\"1.0\") ## TODO
	
	ret.append(\"--username\")
	ret.append(Data.global_config.get(\"gog_username\", \"\"))
	
	ret.append(\"--password\")
	ret.append(Data.global_config.get(\"gog_password\", \"\"))
	ret.append(\"--offline\")
	
	return ret

func _initialize():
	if json_list.is_empty():
		scan_for_json(Data.project_path, json_list)
	
	for file in json_list:
		json_file.add_item(file.get_file())
		json_file.set_item_metadata(-1, file)
		json_file.set_item_tooltip(-1, file)

func _load():
	var file: String = data[\"json_path\"]
	
	for i in json_file.item_count:
		if json_file.get_item_metadata(i) == file:
			json_file.selected = i
			break

func _store():
	data[\"json_path\"] = json_file.get_selected_metadata()

func _get_task_info() -> PackedStringArray:
	return [
		\"Uploads files to GOG based on the given JSON file. Requires Pipeline Builder.\",
		\"JSON File|File used as a base to upload.\",
	]

func scan_for_json(directory: String, list: PackedStringArray):
	for file in DirAccess.get_files_at(directory):
		if file.get_extension() == \"json\":
			var path := directory.path_join(file)
			
			var json: JSON = load(path)
			if not json.data is Dictionary:
				continue
			
			var json_data: Dictionary = json.data
			if not \"project\" in json_data or not \"baseProductId\" in json_data[\"project\"]:
				continue
			
			list.append(path.trim_prefix(Data.project_path + \"/\"))
	
	for dir in DirAccess.get_directories_at(directory):
		if not dir.begins_with(\".\"):
			scan_for_json(directory.path_join(dir), list)

func get_global_content_path() -> String:
	var content_root: String = Data.local_config.get(\"gog_content_root\", \"\")
	return Data.project_path.path_join(content_root)
"

[node name="UploadGog" type="HBoxContainer"]
offset_right = 415.0
offset_bottom = 23.0
script = SubResource("GDScript_a0t4t")

[node name="Control" type="Control" parent="."]
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3

[node name="HBoxContainer" type="HBoxContainer" parent="."]
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 8.0
alignment = 1

[node name="Label" type="Label" parent="HBoxContainer"]
auto_translate_mode = 1
layout_mode = 2
text = "JSON File"
horizontal_alignment = 2

[node name="JSONFile" type="OptionButton" parent="HBoxContainer"]
unique_name_in_owner = true
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3

[node name="Control2" type="Control" parent="."]
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3
