[gd_scene load_steps=3 format=3 uid="uid://228qq6rkrwx6"]

[ext_resource type="PackedScene" uid="uid://cyl1d6reu3mk4" path="res://Nodes/GUI/DirectorySelector.tscn" id="1_nh5oq"]

[sub_resource type="GDScript" id="GDScript_qbsc0"]
script/source = "extends Task

@onready var build_root: HBoxContainer = $BuildRoot
@onready var executable_name: LineEdit = $ExecutableName
@onready var version_prefix: LineEdit = $VersionPrefix

var project_version: String

func _get_task_name() -> String:
	return \"Upload Epic\"

func _initialize() -> void:
	defaults[\"build_root\"] = \"\"
	defaults[\"executable_name\"] = \"\"
	defaults[\"version_prefix\"] = \"\"
	project_version = Data.get_project_version()

func _prevalidate() -> bool:
	if not Data.global_config[\"epic_client_secret_env_var\"].is_empty():
		var env := OS.get_environment(Data.global_config[\"epic_client_secret_env_var\"])
		if env.is_empty():
			error_message = \"The provided Epic client secret env variable does not exist.\"
			return false
	elif Data.global_config[\"epic_client_secret\"].is_empty():
		error_message = \"Epic client secret is empty and no env variable was provided.\"
		return false
	
	if Data.global_config[\"build_patch_tool_path\"].is_empty():
		error_message = \"Build Patch Tool path is empty.\"
	elif not FileAccess.file_exists(Data.global_config[\"build_patch_tool_path\"]):
		error_message = \"Build Patch Tool path does not point to any file.\"
	elif Data.global_config[\"epic_organization_id\"].is_empty():
		error_message = \"Epic organization ID is empty.\"
	elif Data.global_config[\"epic_client_id\"].is_empty():
		error_message = \"Epic client ID is empty.\"
	elif Data.local_config[\"epic_product_id\"].is_empty():
		error_message = \"Epic product ID is empty.\"
	elif Data.local_config[\"epic_artifact_id\"].is_empty():
		error_message = \"Epic artifact ID is empty.\"
	elif executable_name.text.is_empty():
		error_message = \"Executable name is empty.\"
	elif project_version.length() < 1 or project_version.length() > 100:
		error_message = \"Version string invalid (application/config/version). Length must be between 1 and 100 (inclusive).\"
	else:
		var reg := RegEx.create_from_string(r\"^[a-zA-Z0-9\\.\\+-_]*$\")
		if not reg.search(project_version):
			error_message = \"Version string invalid (application/config/version). Use only these characters: a-z, A-Z, 0-9, or .+-_\"
	
	if not Data.global_config[\"epic_client_secret_env_var\"].is_empty():
		var env := OS.get_environment(Data.global_config[\"epic_client_secret_env_var\"])
		if env.is_empty():
			error_message = \"The provided Epic client secret env variable does not exist.\"
	elif Data.global_config[\"epic_client_secret\"].is_empty():
		error_message = \"Epic client secret is empty and no env variable was provided.\"
	
	return error_message.is_empty()

func _validate() -> bool:
	if not DirAccess.dir_exists_absolute(Data.project_path.path_join(build_root.text)):
		error_message = \"The provided build root folder does not exist.\"
		return false
	elif not FileAccess.file_exists(Data.project_path.path_join(build_root.text).path_join(executable_name.text)):
		error_message = \"The executable does not exist in build root folder.\"
		return false
	return true

func _get_command() -> String:
	return Data.global_config[\"build_patch_tool_path\"]

func _get_arguments() -> PackedStringArray:
	var env_var: String = Data.global_config[\"epic_client_secret_env_var\"]
	
	var ret: PackedStringArray
	ret.append(\"-mode=UploadBinary\")
	ret.append(\"-OrganizationId=\\\"%s\\\"\" % Data.global_config[\"epic_organization_id\"])
	ret.append(\"-ClientId=\\\"%s\\\"\" % Data.global_config[\"epic_client_id\"])
	if env_var.is_empty():
		ret.append(\"-ClientSecret=\\\"%s\\\"\" % Data.global_config[\"epic_client_secret\"])
	else:
		ret.append(\"-ClientSecretEnvVar=\\\"%s\\\"\" % env_var)
	ret.append(\"-ProductId=\\\"%s\\\"\" % Data.local_config[\"epic_product_id\"])
	ret.append(\"-ArtifactId=\\\"%s\\\"\" % Data.local_config[\"epic_artifact_id\"])
	ret.append(\"-BuildRoot=\\\"%s\\\"\" % build_root.text)
	ret.append(\"-BuildVersion=\\\"%s-%s\\\"\" % [version_prefix.text, Data.get_project_version()])
	ret.append(\"-AppLaunch=\\\"%s\\\"\" % executable_name.text)
	#ret.append(\"-AppArgs=\\\"\\\"\")
	ret.append(\"-CloudDir=\\\"%s\\\"\" % Data.project_path.path_join(Data.local_config[\"epic_cloud_dir\"]))
	
	return ret

func _load():
	build_root.text = data[\"build_root\"]
	executable_name.text = data[\"executable_name\"]
	version_prefix.text = data[\"version_prefix\"]

func _store():
	data[\"build_root\"] = build_root.text
	data[\"executable_name\"] = executable_name.text
	data[\"version_prefix\"] = version_prefix.text

func _get_task_info() -> PackedStringArray:
	return [
		\"Uploads files to Epic Games using Build Patch Tool.\",
		\"Build Root|The folder with your exported game content.\",
		\"Executable Name|Name of the executable used when launching the game.\",
		\"Version Prefix|Each upload needs unique version string, so use this option to add a (platform-specific etc.) prefix to your base version.\",
	]
"

[node name="UploadEpic" type="GridContainer"]
offset_right = 422.0
offset_bottom = 101.0
columns = 2
script = SubResource("GDScript_qbsc0")
has_sensitive_data = true

[node name="Label" type="Label" parent="."]
layout_mode = 2
text = "Build Root"
horizontal_alignment = 2

[node name="BuildRoot" parent="." instance=ExtResource("1_nh5oq")]
layout_mode = 2
size_flags_horizontal = 3
scope = 1
missing_mode = 1

[node name="Label2" type="Label" parent="."]
auto_translate_mode = 1
layout_mode = 2
text = "Executable Name"
horizontal_alignment = 2

[node name="ExecutableName" type="LineEdit" parent="."]
layout_mode = 2
size_flags_horizontal = 3

[node name="Label3" type="Label" parent="."]
auto_translate_mode = 1
layout_mode = 2
text = "Version Prefix"
horizontal_alignment = 2

[node name="VersionPrefix" type="LineEdit" parent="."]
auto_translate_mode = 1
layout_mode = 2
size_flags_horizontal = 3
